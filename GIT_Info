***BRIEF HISTORY OF VERSION CONTROL:***

1) First Generation
	- Single-file
	- No Networking
	- ex: SCCS, RCS
	
2) Second Generation
	- Multi-file
	- Centralized
	- ex: CVS, VSS, SVN, TFS, Perforce

3) Third Generation
	- Changesets
	- Distributed
	- ex: Git, Hg, Bazaar, BitKeeper
	
http://ericsink.com/vcbe/html/history_of_version_control.html
http://ericsink.com/vcbe/html/bk01-toc.html

***ADVANTAGES OF DVCS***

1) Different topologies
	- Centralized
		-> Developers push changes to one central repository
	- Hierarchial
		-> Developers push changes to sub-system based repositories
		-> Sub-system repositories are periodically merged into a main repository
	- Distributed
		-> Developers push changes to their own repository
		-> Project maintainers pull changes into the official repository

2) Backups are easy
	- Each clone is a full backup
	
3) Reliable branching/merging
	- Feature branches
	- Always work under version control
	- Applying fixed to different branches

4) Full local history
	- Compute repository statistics
	- Analyze regressions

5) New Ideas
	- Deployment
		-> git push heroku prod_branch


***ABOUT GIT***

1) Created by Linus Torvalds, who also created Linux
2) Prompted by Linux-BitKeeper separation
3) Started in 2005
4) Written in Perl and C
5) Runs on Linux, OS X, Windows and many other OS's
6) Design goals
	- Speed, - Simplicity, - Strong branch/merge support, - distributed, - Scales well for large projects

***CONFIGURING GIT***

1) System-level configuration
	-> git config --system
	-> Stored in C:\Program Files(x86)\Git\etc\gitconfig

2) User-level configuration
	-> git config --global
	-> Stored in C:\Users\<name>\.gitconfig

3) Repository-level configuration
	-> git config
	-> Stored in .git/config in each repo
	
- Comomn/firsttime setup:
	git config --global user.name "Rakesh Budugu"
	git config --global user.email "Rakesh_Budugu@test.com"
	git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
	git config --global help.autocorrect 1
	git config --global color.ui auto
	git config --global core.autocrlf true
	
	use --global for user level, --system for system level, nothing for repository level
	
- To see the already configured settings:
	git config --global --list (User level)
	git config --system --list (System level)
	git config --list (All)

- To remove the settings:
	git config --global --unset core.autocrlf
	git config --unset core.autocrlf

